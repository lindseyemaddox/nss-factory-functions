
// metals priced by the ounce

const metals = [
  { metal: "Sterling Silver", price: 12.42 },
  { metal: "14K Gold", price: 736.4 },
  { metal: "24K Gold", price: 1258.9 },
  { metal: "Platinum", price: 795.45 },
  { metal: "Palladium", price: 1241.0 }
];


// diamonds priced by the karat

const diamonds = [
  { karats: 0.5, price: 405 },
  { karats: 0.75, price: 782 },
  { karats: 1, price: 1470 },
  { karats: 1.5, price: 1997 },
  { karats: 2, price: 3638 }
];


// ring styles priced by the style type

const ringStyles = [
  { style: "Classic", price: 500 },
  { style: "Modern", price: 710 },
  { style: "Vintage", price: 965 }
];


// customer-requested ring object, the final structure

var ring1 = {
  style: "Modern",
  karats: 1,
  metal: "24K gold",
  price: 3438.9
};


// perfect example of a factory function - a regular function that can take input and return an object.
// tends to start with the word create, so you can define one for creating custom ring orders.

const createCustomRing = (style, karats, metal) => {
  return {
    style: style.style,
    karats: karats.karats,
    metal: metal.metal,
    price: metal.price + style.price + karats.price
  };
};


// use this new object generated by the factory function above
// to build an HTML component that represents a new customer order

const newRingOrder = createCustomRing(ringStyles[1], diamonds[2], metals[2]);
console.log(newRingOrder);

let metalsSelect = document.getElementById("metals-select");


for (var i = 0; i < metals.length; i++) {
  let option = metals[i];
  metalsSelect.options[metalsSelect.options.length] = new Option(option.metal);
};